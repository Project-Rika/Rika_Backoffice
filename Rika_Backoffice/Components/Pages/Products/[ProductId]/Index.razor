@page "/products/{Id}"
@using Rika_Backoffice.Models
@inject HttpClient Http
@inject IConfiguration _config


<h3>@Product.ProductName</h3>


<EditForm Model="Product">

    <div class="input-group">
        <label>Product Name:</label>
        <InputText @bind-Value="Product.ProductName" />
    </div>

    <div class="input-group">
        <label>Product Id:</label>
        <InputText @bind-Value="Product.Id" />
    </div>

    <div class="input-group">
        <label>Product Description:</label>
        <InputText @bind-Value="Product.ProductDescription" />
    </div>

    <div class="input-group">
        <label>Product Sale Price:</label>
        <InputNumber @bind-Value="Product.ProductSalePrice" />
    </div>

    <div class="input-group">
        <label>Product Price:</label>
        <InputNumber @bind-Value="Product.ProductPrice" />
    </div>

    <div class="input-group">
        <label>Product Category Id:</label>
        <InputNumber @bind-Value="Product.ProductCategoryId" />
    </div>

    <div class="input-group">
        <label>Product Size Id:</label>
        <InputNumber @bind-Value="Product.ProductSizeId" />
    </div>

    <div class="input-group">
        <label>Product Color Id:</label>
        <InputNumber @bind-Value="Product.ProductColorId" />
    </div>

</EditForm>


@code {

    [Parameter]
    public string? Id { get; set; }

    [SupplyParameterFromForm]
    private ProductModel? Product { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        string apiUrl = _config["API_ProductProvider_GetOne"]!;
        var response = await Http.GetAsync($"{apiUrl}&ProductId={Id}");
        Product = await response.Content.ReadFromJsonAsync<ProductModel>();
    }
}