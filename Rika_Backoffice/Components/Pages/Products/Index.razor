@page "/products"
@using Microsoft.AspNetCore.Components.QuickGrid
@using Rika_Backoffice.Models
@using System.Text.Json.Serialization
@inject HttpClient Http
@inject NavigationManager Navigation

@attribute [StreamRendering(true)]
@rendermode @(new InteractiveServerRenderMode(false))

<h3>Products</h3>


@switch (status)
{
    case LoadStatus.Loading:
        <p><em>Loading...</em></p>
        break;
    case LoadStatus.Failed:
        <p><em>Could not fetch products. Please try again later.</em></p>
        break;
    case LoadStatus.NoData:
        <p><em>No products found.</em></p>
        break;
    case LoadStatus.Success:

        <div class="grid">
            <QuickGrid Items="FilteredProducts">
                <PropertyColumn Property="@(o => o.Id)" Title="Id" Sortable="true" />
                <PropertyColumn Property="@(o => o.ProductName)" Title="Name" Sortable="true" Class="title-column" >
                    <ColumnOptions>
                        <div class="search-box">
                            <input type="search" autofocus @bind="productName" @bind:event="oninput" placeholder="Search name..." />
                        </div>
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="@(o => o.ProductPrice)" Title="Price" Sortable="true" Class="customer-name" />
                <PropertyColumn Property="@(o => o.ProductSalePrice)" Title="Sale Price" Sortable="true" Class="customer-name" />
                <PropertyColumn Property="@(o => o.ProductCategory.CategoryName)" Title="Category" Sortable="true" Class="customer-name" />
                <PropertyColumn Property="@(o => o.ProductSize.ProductSizeName)" Title="Size" Sortable="true" Class="customer-name" /> 
                <PropertyColumn Property="@(o => o.ProductColor.ColorName)" Title="Color" Sortable="true" Class="customer-name" />
                <TemplateColumn Title="Action">
                    <NavLink class="btn btn-primary" href="@($"/products/{context.Id}")">Details</NavLink>
                </TemplateColumn>
            </QuickGrid>
        </div>

        break;
}

@code {

    private IQueryable<ProductModel>? products;
    private IQueryable<ProductModel>? FilteredProducts => products?.Where(o => o.ProductName!.Contains(productName, StringComparison.CurrentCultureIgnoreCase));
    private LoadStatus status = LoadStatus.Loading;
    private List<CategoryEntity>? Categories { get; set; } = new List<CategoryEntity>();

    private string productName = string.Empty;

    private void NavigateToDetails(ProductModel product)
    {
        Navigation.NavigateTo($"/products/{product.Id}");
    }

    bool Pending;

    public enum LoadStatus
    {
        Loading,
        Success,
        Failed,
        NoData
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var response = await Http.GetAsync("https://rika-productprovider.azurewebsites.net/api/GetAll?code=QOwFveKm0uiIHv8EM9zOFBOyy4kxbj8PbHiPupYMO3a1AzFup0BBMw%3D%3D");
            var categoryResponse = await Http.GetAsync("https://rika-categoryprovider.azurewebsites.net/api/categories?code=GwUqvzaNc2Xjdx1g5DDN9IxOO8siMioDyoSOjWyVY55pAzFu4jmtkw%3D%3D");


            if (response.IsSuccessStatusCode)
            {
                var productList = await response.Content.ReadFromJsonAsync<List<ProductModel>>();
                var categoryList = await categoryResponse.Content.ReadFromJsonAsync<List<CategoryEntity>>();

                foreach (var product in productList)
                {
                    product.ProductCategory = categoryList?.FirstOrDefault(c => c.CategoryId == product.ProductCategoryId);
                }
                
                Categories = categoryList;
                products = productList?.OrderByDescending(p => p.ProductName).AsQueryable();
                

                status = (products == null || !products.Any()) ? LoadStatus.NoData : LoadStatus.Success;
            }
            else
            {
                status = LoadStatus.Failed;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            status = LoadStatus.Failed;
        }
    }
}